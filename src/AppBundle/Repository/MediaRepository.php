<?php

namespace AppBundle\Repository;

/**
 * MediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaRepository extends \Doctrine\ORM\EntityRepository
{
  /**
   * @param string $order
   *
   * @return result
   */
    public function orderByVotes($order = 'DESC')
    {
      $qb = $this->_em->createQueryBuilder();
      $qb->select('u, COUNT(v.id) AS HIDDEN countVotes')
          ->from($this->_entityName, 'u')
          ->innerJoin('u.votes', 'v')
          ->groupBy('u.id')
          ->orderBy('countVotes', $order);
      return $qb->getQuery();
    }

    /**
     * @param string $order
     * @param string $type -> 0 jour / 1 semaine / 2 mois
     *
     * @return result
     */
      public function orderByJour($type = 'de-la-semaine', $order = 'DESC')
      {
          switch ($type) {
              case 'du-jour' :
                  $from = new \DateTime("now 00:00:00");
                  $to = new \DateTime("now 23:59:59");
                  break;

              case 'de-la-semaine' :
                  $from = new \DateTime("now 00:00:00");
                  $from->sub(new \DateInterval('P1W'));
                  $to = new \DateTime("now 23:59:59");
                  break;

              case 'du-mois' :
                  $from = new \DateTime("now 00:00:00");
                  $from->sub(new \DateInterval('P1M'));
                  $to = new \DateTime("now 23:59:59");
                  break;

              default:
                  $from = new \DateTime("now 00:00:00");
                  $from->sub(new \DateInterval('P1W'));
                  $to = new \DateTime("now 23:59:59");
          }

        $qb = $this->_em->createQueryBuilder();
        $qb->select('u, COUNT(v.id) AS HIDDEN countVotes')
            ->from($this->_entityName, 'u')
            ->innerJoin('u.votes', 'v')
            ->groupBy('u.id')
            ->andWhere('v.date BETWEEN :from AND :to')
            ->orderBy('countVotes', $order)
            ->setParameter('from', $from)
            ->setParameter('to', $to);
        return $qb->getQuery();
      }

}
